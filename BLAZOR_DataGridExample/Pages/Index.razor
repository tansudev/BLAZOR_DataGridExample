@page "/"
@*SessionStorage component*@
@inject ProtectedSessionStorage protectedSessionStore

<h1>DataGrid</h1>

Welcome to Data Grid Example Project


<div class="row">
    <div id="example_wrapper" class="dataTables_wrapper container-fluid dt-bootstrap4">
        <div class="row">
            <div class="col-sm-12 col-md-6">
                <div class="dataTables_length" id="example_length">
                    <label>
                        Show
                        <select name="example_length" aria-controls="example" class="form-control form-control-sm">
                            <option value="5">5</option>
                            <option value="10">10</option>
                            <option value="25">25</option>
                            <option value="-1">All</option>
                        </select> entries
                    </label>
                </div>
            </div>
            <div class="col-sm-12 col-md-6">
                <div id="example_filter" class="dataTables_filter">
                    <label>
                        Search:
                        <input @oninput="OnSearchChanged" value="@search" type="search" class="form-control form-control-sm" placeholder="Arama..." aria-controls="example">
                    </label>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <table id="example" class="table table-striped table-bordered dataTable" style="width:100%" role="grid" aria-describedby="example_info">
                    <thead>
                        <tr role="row">
                            <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" activate to sort column ascending" style="width: 55px;">Id</th>
                            <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" activate to sort column ascending" style="width: 200px;">Name</th>
                            <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" activate to sort column ascending" style="width: 48px;">Email</th>
                            <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" activate to sort column ascending" style="width: 125px;">Phone</th>
                            <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" activate to sort column ascending" style="width: 138px;">Address</th>
                            <th class="sorting" tabindex="0" aria-controls="example" rowspan="1" colspan="1" activate to sort column ascending" style="width: 125px;">Post Code</th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var item in pageList)
                        {
                            <tr role="row" class="even">
                                <td>@item.Id</td>
                                <td>@item.Name</td>
                                <td>@item.Email</td>
                                <td>@item.Phone</td>
                                <td>@item.Address</td>
                                <td>@item.PostCode</td>
                            </tr>

                        }

                    </tbody>
                    <tfoot>
                        <tr>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12 col-md-5">
                <div class="dataTables_info" id="example_info" role="status" aria-live="polite">Showing 1 to @totalPage of @listCount entries</div>
            </div>
            <div class="col-sm-12 col-md-7">
                <div class="dataTables_paginate paging_simple_numbers" id="example_paginate">
                    <ul class="pagination">
                        @if (currentPage > 1)
                        {
                            <li class="paginate_button page-item ">
                                <a href="#" @onclick="MoveFirstPage" aria-controls="example" data-dt-idx="2" tabindex="0" class="page-link">First Page</a>
                            </li>
                            <li class="paginate_button page-item " id="example_next">
                                <a href="#" @onclick="() =>MoveXPage(currentPage-1)" aria-controls="example" data-dt-idx="8" tabindex="0" class=" page-link">&#171; &#8249;</a>
                            </li>
                            @if (currentPage > 2)
                            {
                                <li class="paginate_button page-item ">
                                    <a href="#" @onclick="() => MoveXPage(currentPage - 2)" aria-controls="example" data-dt-idx="2" tabindex="0" class="page-link">@(currentPage-2)</a>
                                </li>
                            }
                            <li class="paginate_button page-item ">
                                <a href="#" @onclick="() => MoveXPage(currentPage - 1)" aria-controls="example" data-dt-idx="2" tabindex="0" class="page-link">@(currentPage-1)</a>
                            </li>
                        }
                        <li class="paginate_button page-item active">
                            <a href="#" aria-controls="example" data-dt-idx="1" tabindex="0" class="btn page-link">@currentPage</a>
                        </li>

                        @if ((totalPage) > currentPage)
                        {
                            <li class="paginate_button page-item ">
                                <a href="#" @onclick="() => MoveXPage(currentPage + 1)" aria-controls="example" data-dt-idx="7" tabindex="0" class="page-link">@(currentPage+1)</a>
                            </li>
                            @if ((totalPage-1) > currentPage)
                            {
                                <li class="paginate_button page-item ">
                                    <a href="#" @onclick="() => MoveXPage(currentPage +2)" aria-controls="example" data-dt-idx="7" tabindex="0" class="page-link">@(currentPage+2)</a>
                                </li>
                            }
                            <li class="paginate_button page-item " id="example_next">
                                <a href="#" @onclick="() =>MoveXPage(currentPage+1)" aria-controls="example" data-dt-idx="8" tabindex="0" class=" page-link">&#8250; &#187;</a>
                            </li>
                            <li class="paginate_button page-item ">
                                <a href="#" @onclick="MoveLastPage" aria-controls="example" data-dt-idx="2" tabindex="0" class="page-link">Last Page</a>
                            </li>
                        }

                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@code
{

    public bool Initialized { get; set; }
    int listCount { get; set; }
    int APageSize { get; set; }
    int currentPage { get; set; }
    int firstIndex { get; set; }
    int lastIndex { get; set; }
    int totalPage { get; set; }
    string search { get; set; }
    bool IsSucces { get; set; }
    List<FakeDataModel> pageList { get; set; }
    List<FakeDataModel> AllData { get; set; }


    //SessionStorage Method
    #region SessionStorage

    //private async Task CurrentPage()
    //{

    //    await protectedSessionStore.SetAsync("page", currentPage);
    //}
    ////Calling LocalStorage
    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        await LoadStateAsync();

    //    }
    //}
    //private async Task LoadStateAsync()
    //{
    //    var storePage = await protectedSessionStore.GetAsync<int>("page");
    //    currentPage = Convert.ToInt32(storePage);
    //}
    #endregion

    protected override async Task OnInitializedAsync()
    {
        firstIndex = 0;
        APageSize = 10;
        listCount = FakeDatas.model.Count();
        currentPage = 1;
        totalPage = (int)Math.Ceiling((decimal)listCount / (decimal)APageSize);
        AllData = FakeDatas.model;
        GetList(AllData, currentPage,firstIndex, APageSize);
    }

    //find list print to table
    public bool GetList(List<FakeDataModel> list,int crrntPage ,int frstIndex, int onePage)
    {
        listCount = list.Count();
        if (listCount >0)
        {
            totalPage = (int)Math.Ceiling((decimal)listCount / (decimal)onePage);
        }
        else
        {
            currentPage = 1;
            firstIndex = 0;
            totalPage = 0;
            pageList = list.GetRange(firstIndex,0);
        }

        if (crrntPage == totalPage)
        {
            int size = listCount % onePage;
            firstIndex = onePage * (crrntPage - 1);
            pageList = list.GetRange(firstIndex, size);
            return true;
        }
        else if (crrntPage <totalPage)
        {
            firstIndex = onePage * (crrntPage - 1);
            pageList = list.GetRange(firstIndex, onePage);
            return true;
        }
        else
        {
            return false;
        }
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        currentPage = 1;
        search = e.Value.ToString();

        AllData = FakeDatas.model.FindAll(x => x.Name.Contains(search));

        GetList(AllData, currentPage, firstIndex, APageSize);
    }

    public void MoveXPage(int page)
    {
        currentPage = page;
        IsSucces = GetList(AllData,page ,firstIndex, APageSize);

    }

    public void MoveLastPage()
    {
        currentPage = totalPage;
        IsSucces = GetList(AllData,currentPage,firstIndex, APageSize);

    }
    public void MoveFirstPage()
    {
        currentPage = 1;
        IsSucces = GetList(AllData,currentPage ,firstIndex, APageSize);
    }
}